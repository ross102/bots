{
  "address": "0x9Eb6dd0D51522a6aece199B77c431995e58697eB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "name": "DataFullfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_status",
          "type": "string"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getVerificationStatus",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestHumanStatus",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_path",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_endpoint",
          "type": "string"
        }
      ],
      "name": "setQueryParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x467772df6606c73b74b706dc6141224fe049e31eb059f4b5fd4784fb2425e5af",
  "receipt": {
    "to": null,
    "from": "0x0De11B6F33b3d0813004C99b3fF7Ff73c1e1F7a3",
    "contractAddress": "0x9Eb6dd0D51522a6aece199B77c431995e58697eB",
    "transactionIndex": 15,
    "gasUsed": "2054587",
    "logsBloom": "0x00000001000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000800020000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000020000000000000000000000000000000000000000000000",
    "blockHash": "0x0d152bf3e14fb87c70b231bacc2c92f636c330cea12ad75d9d019b9ff25c4870",
    "transactionHash": "0x467772df6606c73b74b706dc6141224fe049e31eb059f4b5fd4784fb2425e5af",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 7487758,
        "transactionHash": "0x467772df6606c73b74b706dc6141224fe049e31eb059f4b5fd4784fb2425e5af",
        "address": "0x9Eb6dd0D51522a6aece199B77c431995e58697eB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000de11b6f33b3d0813004c99b3ff7ff73c1e1f7a3"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x0d152bf3e14fb87c70b231bacc2c92f636c330cea12ad75d9d019b9ff25c4870"
      }
    ],
    "blockNumber": 7487758,
    "cumulativeGasUsed": "7636549",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCC79157eb46F5624204f47AB42b3906cAA40eaB7",
    {
      "0": 55,
      "1": 100,
      "2": 56,
      "3": 48,
      "4": 97,
      "5": 54,
      "6": 51,
      "7": 56,
      "8": 54,
      "9": 101,
      "10": 102,
      "11": 53,
      "12": 52,
      "13": 51,
      "14": 97,
      "15": 51,
      "16": 97,
      "17": 98,
      "18": 98,
      "19": 53,
      "20": 50,
      "21": 56,
      "22": 49,
      "23": 55,
      "24": 102,
      "25": 54,
      "26": 55,
      "27": 48,
      "28": 55,
      "29": 101,
      "30": 51,
      "31": 98
    },
    "100000000000000000",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB"
  ],
  "numDeployments": 1,
  "solcInputHash": "a28eaed938a0bc93db4938a407265fb7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"DataFullfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVerificationStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestHumanStatus\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_endpoint\",\"type\":\"string\"}],\"name\":\"setQueryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_fee\":\"- node operator price per API call / data request\",\"_jobId\":\"- specific job for :_oracle: to run; each job is unique and returns different types of data\",\"_link\":\"- LINK token address on the corresponding network * Goerli Testnet details: Link Token: 0x326C977E6efc84E512bB9C30f76E30c160eD06FB Oracle: 0xCC79157eb46F5624204f47AB42b3906cAA40eaB7 (Chainlink DevRel) jobId: 7d80a6386ef543a3abb52817f6707e3b (string) Fee: 0.1 LINK\",\"_oracle\":\"- address of the specific Chainlink node that a contract makes an API call from\"}},\"fulfill(bytes32,string)\":{\"params\":{\"_requestId\":\"- id of the request\",\"_status\":\"- response; requested verification status\"}},\"getVerificationStatus(address)\":{\"returns\":{\"_0\":\"bytes32, the verification status (pending, approved, complete. etc)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestHumanStatus()\":{\"returns\":{\"requestId\":\"- id of the request\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawLink()\":{\"details\":\"Implement a withdraw function to avoid locking your LINK in the contract\"}},\"title\":\"The APIConsumer contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Executes once when a contract is created to initialize state variables\"},\"fulfill(bytes32,string)\":{\"notice\":\"Receives the response in the form of bytes32\"},\"getVerificationStatus(address)\":{\"notice\":\"gets an adresses verification status.\"},\"requestHumanStatus()\":{\"notice\":\"Creates a Chainlink request to retrieve API response, find the target data.\"},\"setQueryParams(string,string)\":{\"notice\":\"sets the chainlink params, can be updated anytime if the endpoint changes\"},\"withdrawLink()\":{\"notice\":\"Witdraws LINK from the contract\"}},\"notice\":\"An API Consumer contract that makes GET requests to obtain 24h trading volume of ETH in USD\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/APIConsumer.sol\":\"APIConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/APIConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title The APIConsumer contract\\n * @notice An API Consumer contract that makes GET requests to obtain 24h trading volume of ETH in USD\\n */\\ncontract APIConsumer is ChainlinkClient, Ownable {\\n  using Chainlink for Chainlink.Request;\\n\\n  address private immutable oracle;\\n  bytes32 private immutable jobId;\\n  uint256 private immutable fee;\\n  string private path;\\n  string private endpoint;\\n\\n  mapping(bytes32 => address) private s_RequestIdToUser;\\n  mapping(address => string) s_UserToVerificationStatus;\\n\\n  event DataFullfilled(string status);\\n\\n  /**\\n   * @notice Executes once when a contract is created to initialize state variables\\n   *\\n   * @param _oracle - address of the specific Chainlink node that a contract makes an API call from\\n   * @param _jobId - specific job for :_oracle: to run; each job is unique and returns different types of data\\n   * @param _fee - node operator price per API call / data request\\n   * @param _link - LINK token address on the corresponding network\\n   *\\n   * * Goerli Testnet details:\\n   * Link Token: 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\n   * Oracle: 0xCC79157eb46F5624204f47AB42b3906cAA40eaB7 (Chainlink DevRel)\\n   * jobId: 7d80a6386ef543a3abb52817f6707e3b (string)\\n   * Fee: 0.1 LINK\\n   */\\n  constructor(\\n    address _oracle,\\n    bytes32 _jobId,\\n    uint256 _fee,\\n    address _link\\n  ) {\\n    if (_link == address(0)) {\\n      setPublicChainlinkToken();\\n    } else {\\n      setChainlinkToken(_link);\\n    }\\n    oracle = _oracle;\\n    jobId = _jobId;\\n    fee = _fee;\\n  }\\n\\n  /**\\n   * @notice gets an adresses verification status.\\n   * @return bytes32, the verification status (pending, approved, complete. etc)\\n   */\\n  function getVerificationStatus(address _user)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return s_UserToVerificationStatus[_user];\\n  }\\n\\n  /**\\n   * @notice sets the chainlink params, can be updated anytime if the endpoint changes\\n   */\\n  function setQueryParams(string memory _path, string memory _endpoint)\\n    public\\n    onlyOwner\\n  {\\n    path = _path;\\n    endpoint = _endpoint;\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to retrieve API response, find the target\\n   * data.\\n   *\\n   * @return requestId - id of the request\\n   */\\n  function requestHumanStatus() public returns (bytes32 requestId) {\\n    Chainlink.Request memory request = buildChainlinkRequest(\\n      jobId,\\n      address(this),\\n      this.fulfill.selector\\n    );\\n    // Set the URL to perform the GET request on\\n    request.add(\\\"get\\\", string(abi.encodePacked(endpoint, msg.sender)));\\n    // Chainlink nodes prior to 1.0.0 support this format\\n    request.add(\\\"path\\\", path); // Chainlink nodes 1.0.0 and later support this format\\n    s_RequestIdToUser[requestId] = msg.sender;\\n    // Sends the request\\n    return sendChainlinkRequestTo(oracle, request, fee);\\n  }\\n\\n  /**\\n   * @notice Receives the response in the form of bytes32\\n   *\\n   * @param _requestId - id of the request\\n   * @param _status - response; requested verification status\\n   */\\n  function fulfill(bytes32 _requestId, string memory _status)\\n    public\\n    recordChainlinkFulfillment(_requestId)\\n  {\\n    s_UserToVerificationStatus[s_RequestIdToUser[_requestId]] = _status;\\n    emit DataFullfilled(_status);\\n  }\\n\\n  /**\\n   * @notice Witdraws LINK from the contract\\n   * @dev Implement a withdraw function to avoid locking your LINK in the contract\\n   */\\n  function withdrawLink() public onlyOwner {\\n    LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n    require(\\n      link.transfer(msg.sender, link.balanceOf(address(this))),\\n      \\\"Unable to transfer\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xca97fb23b5a6ea580f513f7fff9b2965a47c36e7f62f9c24e62a353cb5806846\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260016004553480156200001657600080fd5b50604051620027243803806200272483398181016040528101906200003c919062000391565b6200005c620000506200010760201b60201c565b6200010f60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000a757620000a1620001d560201b60201c565b620000b9565b620000b8816200026d60201b60201c565b5b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508260a081815250508160c081815250505050505062000435565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200026b73c89bd4e1632d3a43cb03aaad5262cbe4038bc57173ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000239573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025f919062000403565b6200026d60201b60201c565b565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002e382620002b6565b9050919050565b620002f581620002d6565b81146200030157600080fd5b50565b6000815190506200031581620002ea565b92915050565b6000819050919050565b62000330816200031b565b81146200033c57600080fd5b50565b600081519050620003508162000325565b92915050565b6000819050919050565b6200036b8162000356565b81146200037757600080fd5b50565b6000815190506200038b8162000360565b92915050565b60008060008060808587031215620003ae57620003ad620002b1565b5b6000620003be8782880162000304565b9450506020620003d1878288016200033f565b9350506040620003e4878288016200037a565b9250506060620003f78782880162000304565b91505092959194509250565b6000602082840312156200041c576200041b620002b1565b5b60006200042c8482850162000304565b91505092915050565b60805160a05160c0516122bf62000465600039600061079a015260006105b20152600061077801526122bf6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ff5780638dc654a21461011d578063c05bb11e14610127578063f2fde38b1461014557610088565b806336a5a4041461008d57806337441996146100a95780636103681a146100c5578063715018a6146100f5575b600080fd5b6100a760048036038101906100a2919061139e565b610161565b005b6100c360048036038101906100be919061144c565b61018d565b005b6100df60048036038101906100da9190611506565b61034e565b6040516100ec91906115bb565b60405180910390f35b6100fd61041f565b005b610107610433565b60405161011491906115ec565b60405180910390f35b61012561045d565b005b61012f6105aa565b60405161013c9190611616565b60405180910390f35b61015f600480360381019061015a9190611506565b6107c4565b005b610169610847565b81600790816101789190611847565b5080600890816101889190611847565b505050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102269061198b565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a281600a60006009600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816103119190611847565b507f45ce74a5be512a7e0fb21e7b0826202decf92f3900a7f9c037b1802cbfd62fa58260405161034191906115bb565b60405180910390a1505050565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461039a90611660565b80601f01602080910402602001604051908101604052809291908181526020018280546103c690611660565b80156104135780601f106103e857610100808354040283529160200191610413565b820191906000526020600020905b8154815290600101906020018083116103f657829003601f168201915b50505050509050919050565b610427610847565b61043160006108c5565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610465610847565b600061046f61098b565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104c791906115ec565b602060405180830381865afa1580156104e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050891906119d7565b6040518363ffffffff1660e01b8152600401610525929190611a13565b6020604051808303816000875af1158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190611a74565b6105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e90611aed565b60405180910390fd5b50565b6000806105df7f000000000000000000000000000000000000000000000000000000000000000030633744199660e01b6109b5565b905061064d6040518060400160405280600381526020017f676574000000000000000000000000000000000000000000000000000000000081525060083360405160200161062e929190611be3565b604051602081830303815290604052836109e69092919063ffffffff16565b6107216040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506007805461069390611660565b80601f01602080910402602001604051908101604052809291908181526020018280546106bf90611660565b801561070c5780601f106106e15761010080835404028352916020019161070c565b820191906000526020600020905b8154815290600101906020018083116106ef57829003601f168201915b5050505050836109e69092919063ffffffff16565b336009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107be7f0000000000000000000000000000000000000000000000000000000000000000827f0000000000000000000000000000000000000000000000000000000000000000610a19565b91505090565b6107cc610847565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361083b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083290611c7d565b60405180910390fd5b610844816108c5565b50565b61084f610ae5565b73ffffffffffffffffffffffffffffffffffffffff1661086d610433565b73ffffffffffffffffffffffffffffffffffffffff16146108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90611ce9565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109bd6111bd565b6109c56111bd565b6109dc85858584610aed909392919063ffffffff16565b9150509392505050565b6109fd828460800151610b9d90919063ffffffff16565b610a14818460800151610b9d90919063ffffffff16565b505050565b6000806004549050600181610a2e9190611d38565b6004819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401610a6f989796959493929190611e1e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610ada86838684610bc2565b925050509392505050565b600033905090565b610af56111bd565b610b058560800151610100610d57565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b610baa8260038351610dc1565b610bbd8183610f4690919063ffffffff16565b505050565b60003084604051602001610bd7929190611f21565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401610ccd93929190611f4d565b6020604051808303816000875af1158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d109190611a74565b610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690611ffd565b60405180910390fd5b949350505050565b610d5f61122a565b6000602083610d6e919061204c565b14610d9a57602082610d80919061204c565b6020610d8c919061207d565b82610d979190611d38565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611610df857610df28160058460ff16901b60ff161784610f6890919063ffffffff16565b50610f41565b60ff8167ffffffffffffffff1611610e4e57610e27601860058460ff16901b1784610f6890919063ffffffff16565b50610e488167ffffffffffffffff16600185610f889092919063ffffffff16565b50610f40565b61ffff8167ffffffffffffffff1611610ea557610e7e601960058460ff16901b1784610f6890919063ffffffff16565b50610e9f8167ffffffffffffffff16600285610f889092919063ffffffff16565b50610f3f565b63ffffffff8167ffffffffffffffff1611610efe57610ed7601a60058460ff16901b1784610f6890919063ffffffff16565b50610ef88167ffffffffffffffff16600485610f889092919063ffffffff16565b50610f3e565b610f1b601b60058460ff16901b1784610f6890919063ffffffff16565b50610f3c8167ffffffffffffffff16600885610f889092919063ffffffff16565b505b5b5b5b505050565b610f4e61122a565b610f6083846000015151848551610faa565b905092915050565b610f7061122a565b610f808384600001515184611099565b905092915050565b610f9061122a565b610fa18485600001515185856110ef565b90509392505050565b610fb261122a565b8251821115610fc057600080fd5b84602001518285610fd19190611d38565b111561100657611005856002610ff688602001518887610ff19190611d38565b61117d565b61100091906120b1565b611199565b5b6000808651805187602083010193508088870111156110255787860182525b60208701925050505b6020841061106c57805182526020826110479190611d38565b91506020816110569190611d38565b9050602084611065919061207d565b935061102e565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6110a161122a565b836020015183106110c7576110c684600286602001516110c191906120b1565b611199565b5b835180516020858301018481538186036110e2576001820183525b5050508390509392505050565b6110f761122a565b846020015184836111089190611d38565b11156111305761112f85600286856111209190611d38565b61112a91906120b1565b611199565b5b6000600183610100611142919061223e565b61114c919061207d565b9050855183868201018583198251161781528151858801111561116f5784870182525b505085915050949350505050565b60008183111561118f57829050611193565b8190505b92915050565b6000826000015190506111ac8383610d57565b506111b78382610f46565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161122461122a565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112ab82611262565b810181811067ffffffffffffffff821117156112ca576112c9611273565b5b80604052505050565b60006112dd611244565b90506112e982826112a2565b919050565b600067ffffffffffffffff82111561130957611308611273565b5b61131282611262565b9050602081019050919050565b82818337600083830152505050565b600061134161133c846112ee565b6112d3565b90508281526020810184848401111561135d5761135c61125d565b5b61136884828561131f565b509392505050565b600082601f83011261138557611384611258565b5b813561139584826020860161132e565b91505092915050565b600080604083850312156113b5576113b461124e565b5b600083013567ffffffffffffffff8111156113d3576113d2611253565b5b6113df85828601611370565b925050602083013567ffffffffffffffff811115611400576113ff611253565b5b61140c85828601611370565b9150509250929050565b6000819050919050565b61142981611416565b811461143457600080fd5b50565b60008135905061144681611420565b92915050565b600080604083850312156114635761146261124e565b5b600061147185828601611437565b925050602083013567ffffffffffffffff81111561149257611491611253565b5b61149e85828601611370565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114d3826114a8565b9050919050565b6114e3816114c8565b81146114ee57600080fd5b50565b600081359050611500816114da565b92915050565b60006020828403121561151c5761151b61124e565b5b600061152a848285016114f1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561156d578082015181840152602081019050611552565b8381111561157c576000848401525b50505050565b600061158d82611533565b611597818561153e565b93506115a781856020860161154f565b6115b081611262565b840191505092915050565b600060208201905081810360008301526115d58184611582565b905092915050565b6115e6816114c8565b82525050565b600060208201905061160160008301846115dd565b92915050565b61161081611416565b82525050565b600060208201905061162b6000830184611607565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061167857607f821691505b60208210810361168b5761168a611631565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826116b6565b6116fd86836116b6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061174461173f61173a84611715565b61171f565b611715565b9050919050565b6000819050919050565b61175e83611729565b61177261176a8261174b565b8484546116c3565b825550505050565b600090565b61178761177a565b611792818484611755565b505050565b5b818110156117b6576117ab60008261177f565b600181019050611798565b5050565b601f8211156117fb576117cc81611691565b6117d5846116a6565b810160208510156117e4578190505b6117f86117f0856116a6565b830182611797565b50505b505050565b600082821c905092915050565b600061181e60001984600802611800565b1980831691505092915050565b6000611837838361180d565b9150826002028217905092915050565b61185082611533565b67ffffffffffffffff81111561186957611868611273565b5b6118738254611660565b61187e8282856117ba565b600060209050601f8311600181146118b1576000841561189f578287015190505b6118a9858261182b565b865550611911565b601f1984166118bf86611691565b60005b828110156118e7578489015182556001820191506020850194506020810190506118c2565b868310156119045784890151611900601f89168261180d565b8355505b6001600288020188555050505b505050505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b600061197560288361153e565b915061198082611919565b604082019050919050565b600060208201905081810360008301526119a481611968565b9050919050565b6119b481611715565b81146119bf57600080fd5b50565b6000815190506119d1816119ab565b92915050565b6000602082840312156119ed576119ec61124e565b5b60006119fb848285016119c2565b91505092915050565b611a0d81611715565b82525050565b6000604082019050611a2860008301856115dd565b611a356020830184611a04565b9392505050565b60008115159050919050565b611a5181611a3c565b8114611a5c57600080fd5b50565b600081519050611a6e81611a48565b92915050565b600060208284031215611a8a57611a8961124e565b5b6000611a9884828501611a5f565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000611ad760128361153e565b9150611ae282611aa1565b602082019050919050565b60006020820190508181036000830152611b0681611aca565b9050919050565b600081905092915050565b60008154611b2581611660565b611b2f8186611b0d565b94506001821660008114611b4a5760018114611b5f57611b92565b60ff1983168652811515820286019350611b92565b611b6885611691565b60005b83811015611b8a57815481890152600182019150602081019050611b6b565b838801955050505b50505092915050565b60008160601b9050919050565b6000611bb382611b9b565b9050919050565b6000611bc582611ba8565b9050919050565b611bdd611bd8826114c8565b611bba565b82525050565b6000611bef8285611b18565b9150611bfb8284611bcc565b6014820191508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611c6760268361153e565b9150611c7282611c0b565b604082019050919050565b60006020820190508181036000830152611c9681611c5a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611cd360208361153e565b9150611cde82611c9d565b602082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d4382611715565b9150611d4e83611715565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d8357611d82611d09565b5b828201905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dc381611d8e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000611df082611dc9565b611dfa8185611dd4565b9350611e0a81856020860161154f565b611e1381611262565b840191505092915050565b600061010082019050611e34600083018b6115dd565b611e41602083018a611a04565b611e4e6040830189611607565b611e5b60608301886115dd565b611e686080830187611dba565b611e7560a0830186611a04565b611e8260c0830185611a04565b81810360e0830152611e948184611de5565b90509998505050505050505050565b6000611ebe611eb9611eb4846114a8565b61171f565b6114a8565b9050919050565b6000611ed082611ea3565b9050919050565b6000611ee282611ec5565b9050919050565b611efa611ef582611ed7565b611bba565b82525050565b6000819050919050565b611f1b611f1682611715565b611f00565b82525050565b6000611f2d8285611ee9565b601482019150611f3d8284611f0a565b6020820191508190509392505050565b6000606082019050611f6260008301866115dd565b611f6f6020830185611a04565b8181036040830152611f818184611de5565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000611fe760238361153e565b9150611ff282611f8b565b604082019050919050565b6000602082019050818103600083015261201681611fda565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061205782611715565b915061206283611715565b9250826120725761207161201d565b5b828206905092915050565b600061208882611715565b915061209383611715565b9250828210156120a6576120a5611d09565b5b828203905092915050565b60006120bc82611715565b91506120c783611715565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612100576120ff611d09565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b60018511156121625780860481111561213e5761213d611d09565b5b600185161561214d5780820291505b808102905061215b8561210b565b9450612122565b94509492505050565b60008261217b5760019050612237565b816121895760009050612237565b816001811461219f57600281146121a9576121d8565b6001915050612237565b60ff8411156121bb576121ba611d09565b5b8360020a9150848211156121d2576121d1611d09565b5b50612237565b5060208310610133831016604e8410600b841016171561220d5782820a90508381111561220857612207611d09565b5b612237565b61221a8484846001612118565b9250905081840481111561223157612230611d09565b5b81810290505b9392505050565b600061224982611715565b915061225483611715565b92506122817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461216b565b90509291505056fea26469706673582212207354f5ebb3e3bb8b7ce780c7b41398b4419609a5204c6653e17084fbc5890a6164736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ff5780638dc654a21461011d578063c05bb11e14610127578063f2fde38b1461014557610088565b806336a5a4041461008d57806337441996146100a95780636103681a146100c5578063715018a6146100f5575b600080fd5b6100a760048036038101906100a2919061139e565b610161565b005b6100c360048036038101906100be919061144c565b61018d565b005b6100df60048036038101906100da9190611506565b61034e565b6040516100ec91906115bb565b60405180910390f35b6100fd61041f565b005b610107610433565b60405161011491906115ec565b60405180910390f35b61012561045d565b005b61012f6105aa565b60405161013c9190611616565b60405180910390f35b61015f600480360381019061015a9190611506565b6107c4565b005b610169610847565b81600790816101789190611847565b5080600890816101889190611847565b505050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102269061198b565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a281600a60006009600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816103119190611847565b507f45ce74a5be512a7e0fb21e7b0826202decf92f3900a7f9c037b1802cbfd62fa58260405161034191906115bb565b60405180910390a1505050565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461039a90611660565b80601f01602080910402602001604051908101604052809291908181526020018280546103c690611660565b80156104135780601f106103e857610100808354040283529160200191610413565b820191906000526020600020905b8154815290600101906020018083116103f657829003601f168201915b50505050509050919050565b610427610847565b61043160006108c5565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610465610847565b600061046f61098b565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104c791906115ec565b602060405180830381865afa1580156104e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050891906119d7565b6040518363ffffffff1660e01b8152600401610525929190611a13565b6020604051808303816000875af1158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190611a74565b6105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e90611aed565b60405180910390fd5b50565b6000806105df7f000000000000000000000000000000000000000000000000000000000000000030633744199660e01b6109b5565b905061064d6040518060400160405280600381526020017f676574000000000000000000000000000000000000000000000000000000000081525060083360405160200161062e929190611be3565b604051602081830303815290604052836109e69092919063ffffffff16565b6107216040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506007805461069390611660565b80601f01602080910402602001604051908101604052809291908181526020018280546106bf90611660565b801561070c5780601f106106e15761010080835404028352916020019161070c565b820191906000526020600020905b8154815290600101906020018083116106ef57829003601f168201915b5050505050836109e69092919063ffffffff16565b336009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107be7f0000000000000000000000000000000000000000000000000000000000000000827f0000000000000000000000000000000000000000000000000000000000000000610a19565b91505090565b6107cc610847565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361083b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083290611c7d565b60405180910390fd5b610844816108c5565b50565b61084f610ae5565b73ffffffffffffffffffffffffffffffffffffffff1661086d610433565b73ffffffffffffffffffffffffffffffffffffffff16146108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90611ce9565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109bd6111bd565b6109c56111bd565b6109dc85858584610aed909392919063ffffffff16565b9150509392505050565b6109fd828460800151610b9d90919063ffffffff16565b610a14818460800151610b9d90919063ffffffff16565b505050565b6000806004549050600181610a2e9190611d38565b6004819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401610a6f989796959493929190611e1e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610ada86838684610bc2565b925050509392505050565b600033905090565b610af56111bd565b610b058560800151610100610d57565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b610baa8260038351610dc1565b610bbd8183610f4690919063ffffffff16565b505050565b60003084604051602001610bd7929190611f21565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401610ccd93929190611f4d565b6020604051808303816000875af1158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d109190611a74565b610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690611ffd565b60405180910390fd5b949350505050565b610d5f61122a565b6000602083610d6e919061204c565b14610d9a57602082610d80919061204c565b6020610d8c919061207d565b82610d979190611d38565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611610df857610df28160058460ff16901b60ff161784610f6890919063ffffffff16565b50610f41565b60ff8167ffffffffffffffff1611610e4e57610e27601860058460ff16901b1784610f6890919063ffffffff16565b50610e488167ffffffffffffffff16600185610f889092919063ffffffff16565b50610f40565b61ffff8167ffffffffffffffff1611610ea557610e7e601960058460ff16901b1784610f6890919063ffffffff16565b50610e9f8167ffffffffffffffff16600285610f889092919063ffffffff16565b50610f3f565b63ffffffff8167ffffffffffffffff1611610efe57610ed7601a60058460ff16901b1784610f6890919063ffffffff16565b50610ef88167ffffffffffffffff16600485610f889092919063ffffffff16565b50610f3e565b610f1b601b60058460ff16901b1784610f6890919063ffffffff16565b50610f3c8167ffffffffffffffff16600885610f889092919063ffffffff16565b505b5b5b5b505050565b610f4e61122a565b610f6083846000015151848551610faa565b905092915050565b610f7061122a565b610f808384600001515184611099565b905092915050565b610f9061122a565b610fa18485600001515185856110ef565b90509392505050565b610fb261122a565b8251821115610fc057600080fd5b84602001518285610fd19190611d38565b111561100657611005856002610ff688602001518887610ff19190611d38565b61117d565b61100091906120b1565b611199565b5b6000808651805187602083010193508088870111156110255787860182525b60208701925050505b6020841061106c57805182526020826110479190611d38565b91506020816110569190611d38565b9050602084611065919061207d565b935061102e565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6110a161122a565b836020015183106110c7576110c684600286602001516110c191906120b1565b611199565b5b835180516020858301018481538186036110e2576001820183525b5050508390509392505050565b6110f761122a565b846020015184836111089190611d38565b11156111305761112f85600286856111209190611d38565b61112a91906120b1565b611199565b5b6000600183610100611142919061223e565b61114c919061207d565b9050855183868201018583198251161781528151858801111561116f5784870182525b505085915050949350505050565b60008183111561118f57829050611193565b8190505b92915050565b6000826000015190506111ac8383610d57565b506111b78382610f46565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161122461122a565b81525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112ab82611262565b810181811067ffffffffffffffff821117156112ca576112c9611273565b5b80604052505050565b60006112dd611244565b90506112e982826112a2565b919050565b600067ffffffffffffffff82111561130957611308611273565b5b61131282611262565b9050602081019050919050565b82818337600083830152505050565b600061134161133c846112ee565b6112d3565b90508281526020810184848401111561135d5761135c61125d565b5b61136884828561131f565b509392505050565b600082601f83011261138557611384611258565b5b813561139584826020860161132e565b91505092915050565b600080604083850312156113b5576113b461124e565b5b600083013567ffffffffffffffff8111156113d3576113d2611253565b5b6113df85828601611370565b925050602083013567ffffffffffffffff811115611400576113ff611253565b5b61140c85828601611370565b9150509250929050565b6000819050919050565b61142981611416565b811461143457600080fd5b50565b60008135905061144681611420565b92915050565b600080604083850312156114635761146261124e565b5b600061147185828601611437565b925050602083013567ffffffffffffffff81111561149257611491611253565b5b61149e85828601611370565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114d3826114a8565b9050919050565b6114e3816114c8565b81146114ee57600080fd5b50565b600081359050611500816114da565b92915050565b60006020828403121561151c5761151b61124e565b5b600061152a848285016114f1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561156d578082015181840152602081019050611552565b8381111561157c576000848401525b50505050565b600061158d82611533565b611597818561153e565b93506115a781856020860161154f565b6115b081611262565b840191505092915050565b600060208201905081810360008301526115d58184611582565b905092915050565b6115e6816114c8565b82525050565b600060208201905061160160008301846115dd565b92915050565b61161081611416565b82525050565b600060208201905061162b6000830184611607565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061167857607f821691505b60208210810361168b5761168a611631565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826116b6565b6116fd86836116b6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061174461173f61173a84611715565b61171f565b611715565b9050919050565b6000819050919050565b61175e83611729565b61177261176a8261174b565b8484546116c3565b825550505050565b600090565b61178761177a565b611792818484611755565b505050565b5b818110156117b6576117ab60008261177f565b600181019050611798565b5050565b601f8211156117fb576117cc81611691565b6117d5846116a6565b810160208510156117e4578190505b6117f86117f0856116a6565b830182611797565b50505b505050565b600082821c905092915050565b600061181e60001984600802611800565b1980831691505092915050565b6000611837838361180d565b9150826002028217905092915050565b61185082611533565b67ffffffffffffffff81111561186957611868611273565b5b6118738254611660565b61187e8282856117ba565b600060209050601f8311600181146118b1576000841561189f578287015190505b6118a9858261182b565b865550611911565b601f1984166118bf86611691565b60005b828110156118e7578489015182556001820191506020850194506020810190506118c2565b868310156119045784890151611900601f89168261180d565b8355505b6001600288020188555050505b505050505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b600061197560288361153e565b915061198082611919565b604082019050919050565b600060208201905081810360008301526119a481611968565b9050919050565b6119b481611715565b81146119bf57600080fd5b50565b6000815190506119d1816119ab565b92915050565b6000602082840312156119ed576119ec61124e565b5b60006119fb848285016119c2565b91505092915050565b611a0d81611715565b82525050565b6000604082019050611a2860008301856115dd565b611a356020830184611a04565b9392505050565b60008115159050919050565b611a5181611a3c565b8114611a5c57600080fd5b50565b600081519050611a6e81611a48565b92915050565b600060208284031215611a8a57611a8961124e565b5b6000611a9884828501611a5f565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000611ad760128361153e565b9150611ae282611aa1565b602082019050919050565b60006020820190508181036000830152611b0681611aca565b9050919050565b600081905092915050565b60008154611b2581611660565b611b2f8186611b0d565b94506001821660008114611b4a5760018114611b5f57611b92565b60ff1983168652811515820286019350611b92565b611b6885611691565b60005b83811015611b8a57815481890152600182019150602081019050611b6b565b838801955050505b50505092915050565b60008160601b9050919050565b6000611bb382611b9b565b9050919050565b6000611bc582611ba8565b9050919050565b611bdd611bd8826114c8565b611bba565b82525050565b6000611bef8285611b18565b9150611bfb8284611bcc565b6014820191508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611c6760268361153e565b9150611c7282611c0b565b604082019050919050565b60006020820190508181036000830152611c9681611c5a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611cd360208361153e565b9150611cde82611c9d565b602082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d4382611715565b9150611d4e83611715565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d8357611d82611d09565b5b828201905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dc381611d8e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000611df082611dc9565b611dfa8185611dd4565b9350611e0a81856020860161154f565b611e1381611262565b840191505092915050565b600061010082019050611e34600083018b6115dd565b611e41602083018a611a04565b611e4e6040830189611607565b611e5b60608301886115dd565b611e686080830187611dba565b611e7560a0830186611a04565b611e8260c0830185611a04565b81810360e0830152611e948184611de5565b90509998505050505050505050565b6000611ebe611eb9611eb4846114a8565b61171f565b6114a8565b9050919050565b6000611ed082611ea3565b9050919050565b6000611ee282611ec5565b9050919050565b611efa611ef582611ed7565b611bba565b82525050565b6000819050919050565b611f1b611f1682611715565b611f00565b82525050565b6000611f2d8285611ee9565b601482019150611f3d8284611f0a565b6020820191508190509392505050565b6000606082019050611f6260008301866115dd565b611f6f6020830185611a04565b8181036040830152611f818184611de5565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000611fe760238361153e565b9150611ff282611f8b565b604082019050919050565b6000602082019050818103600083015261201681611fda565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061205782611715565b915061206283611715565b9250826120725761207161201d565b5b828206905092915050565b600061208882611715565b915061209383611715565b9250828210156120a6576120a5611d09565b5b828203905092915050565b60006120bc82611715565b91506120c783611715565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612100576120ff611d09565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b60018511156121625780860481111561213e5761213d611d09565b5b600185161561214d5780820291505b808102905061215b8561210b565b9450612122565b94509492505050565b60008261217b5760019050612237565b816121895760009050612237565b816001811461219f57600281146121a9576121d8565b6001915050612237565b60ff8411156121bb576121ba611d09565b5b8360020a9150848211156121d2576121d1611d09565b5b50612237565b5060208310610133831016604e8410600b841016171561220d5782820a90508381111561220857612207611d09565b5b612237565b61221a8484846001612118565b9250905081840481111561223157612230611d09565b5b81810290505b9392505050565b600061224982611715565b915061225483611715565b92506122817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461216b565b90509291505056fea26469706673582212207354f5ebb3e3bb8b7ce780c7b41398b4419609a5204c6653e17084fbc5890a6164736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_fee": "- node operator price per API call / data request",
          "_jobId": "- specific job for :_oracle: to run; each job is unique and returns different types of data",
          "_link": "- LINK token address on the corresponding network * Goerli Testnet details: Link Token: 0x326C977E6efc84E512bB9C30f76E30c160eD06FB Oracle: 0xCC79157eb46F5624204f47AB42b3906cAA40eaB7 (Chainlink DevRel) jobId: 7d80a6386ef543a3abb52817f6707e3b (string) Fee: 0.1 LINK",
          "_oracle": "- address of the specific Chainlink node that a contract makes an API call from"
        }
      },
      "fulfill(bytes32,string)": {
        "params": {
          "_requestId": "- id of the request",
          "_status": "- response; requested verification status"
        }
      },
      "getVerificationStatus(address)": {
        "returns": {
          "_0": "bytes32, the verification status (pending, approved, complete. etc)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestHumanStatus()": {
        "returns": {
          "requestId": "- id of the request"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawLink()": {
        "details": "Implement a withdraw function to avoid locking your LINK in the contract"
      }
    },
    "title": "The APIConsumer contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Executes once when a contract is created to initialize state variables"
      },
      "fulfill(bytes32,string)": {
        "notice": "Receives the response in the form of bytes32"
      },
      "getVerificationStatus(address)": {
        "notice": "gets an adresses verification status."
      },
      "requestHumanStatus()": {
        "notice": "Creates a Chainlink request to retrieve API response, find the target data."
      },
      "setQueryParams(string,string)": {
        "notice": "sets the chainlink params, can be updated anytime if the endpoint changes"
      },
      "withdrawLink()": {
        "notice": "Witdraws LINK from the contract"
      }
    },
    "notice": "An API Consumer contract that makes GET requests to obtain 24h trading volume of ETH in USD",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2183,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2331,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "path",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2333,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "endpoint",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2337,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_RequestIdToUser",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2341,
        "contract": "contracts/APIConsumer.sol:APIConsumer",
        "label": "s_UserToVerificationStatus",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}