{
  "address": "0x9EbAd392C3ecAe0CEb9b554b94ab44F2c21B8504",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_job_Id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_link_Token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "name": "StatusFufilled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_status",
          "type": "string"
        }
      ],
      "name": "fulfillHumanityStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getVerificationStatus",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestHumanityStatus",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_UserToVerificationStatus",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_path",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseApi",
          "type": "string"
        }
      ],
      "name": "setQueryParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb432219c2b3f736f9a90e6653417423369e4b7f94a797f20c7144290f96188f0",
  "receipt": {
    "to": null,
    "from": "0x0De11B6F33b3d0813004C99b3fF7Ff73c1e1F7a3",
    "contractAddress": "0x9EbAd392C3ecAe0CEb9b554b94ab44F2c21B8504",
    "transactionIndex": 16,
    "gasUsed": "2302986",
    "logsBloom": "0x
    "blockHash": "0x8957d6533f319585163f740fd7af010290956357541cb47ed94f6e3e5a6e22c3",
    "transactionHash": "0xb432219c2b3f736f9a90e6653417423369e4b7f94a797f20c7144290f96188f0",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 7525978,
        "transactionHash": "0xb432219c2b3f736f9a90e6653417423369e4b7f94a797f20c7144290f96188f0",
        "address": "0x9EbAd392C3ecAe0CEb9b554b94ab44F2c21B8504",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000de11b6f33b3d0813004c99b3ff7ff73c1e1f7a3"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x8957d6533f319585163f740fd7af010290956357541cb47ed94f6e3e5a6e22c3"
      }
    ],
    "blockNumber": 7525978,
    "cumulativeGasUsed": "3872748",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "0": 50,
      "1": 57,
      "2": 56,
      "3": 51,
      "4": 101,
      "5": 54,
      "6": 101,
      "7": 53,
      "8": 98,
      "9": 56,
      "10": 52,
      "11": 50,
      "12": 52,
      "13": 48,
      "14": 54,
      "15": 99,
      "16": 57,
      "17": 98,
      "18": 98,
      "19": 48,
      "20": 53,
      "21": 100,
      "22": 56,
      "23": 50,
      "24": 99,
      "25": 56,
      "26": 97,
      "27": 102,
      "28": 99,
      "29": 51,
      "30": 48,
      "31": 100
    },
    "0x1F4aA12370490C7cd4570cd08B1be419e507C9D1",
    "100000000000000000",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB"
  ],
  "numDeployments": 1,
  "solcInputHash": "997a2c37219f04c95287f9fc15511d46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_job_Id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_link_Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"StatusFufilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"fulfillHumanityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVerificationStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestHumanityStatus\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_UserToVerificationStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseApi\",\"type\":\"string\"}],\"name\":\"setQueryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_fee\":\"- node operator price per API call / data request\",\"_job_Id\":\"- specific job for :_operator: to run; each job is unique and returns different types of data\",\"_link_Token\":\"- LINK token address on the corresponding network\",\"_operator\":\"- address of the specific Chainlink node that a contract makes an API call from\"}},\"getVerificationStatus(address)\":{\"params\":{\"_user\":\"- the user to retrieve verification status for.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestHumanityStatus()\":{\"returns\":{\"requestId\":\"- unique request identifier\"}},\"setQueryParams(string,string)\":{\"params\":{\"_baseApi\":\"- Set the base URL to perform the GET request on\",\"_path\":\"- the path to walk when an api call is made\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Executes once when a contract is created to initialize state variables\"},\"fulfillHumanityStatus(bytes32,string)\":{\"notice\":\"Receive the response in the form of a string\"},\"getVerificationStatus(address)\":{\"notice\":\"get the users verification status (approved, declined, pending ...)\"},\"requestHumanityStatus()\":{\"notice\":\"Create a Chainlink request to retrieve API response, and find the target (status).\"},\"setQueryParams(string,string)\":{\"notice\":\"sets the chainlink request parameters\"},\"withdrawLink()\":{\"notice\":\"Allow the withdrawal of Link tokens from the contract\"}},\"notice\":\"Request testnet LINK and ETH here: https://faucets.chain.link/ Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/ Run your own chainlink Node and deploy an operator contract: https://docs.chain.link/docs/running-a-chainlink-node/\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AreYouHuman.sol\":\"AreYouHuman\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/AreYouHuman.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * Request testnet LINK and ETH here: https://faucets.chain.link/\\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\\n * Run your own chainlink Node and deploy an operator contract: https://docs.chain.link/docs/running-a-chainlink-node/\\n */\\n\\ncontract AreYouHuman is ChainlinkClient, Ownable {\\n  using Chainlink for Chainlink.Request;\\n\\n  // var jobId: external job id of a chainlink node\\n  bytes32 private immutable jobId;\\n  // var fee: 0.1 link, required to call the operator contract\\n  uint256 private immutable fee;\\n\\n  // var path: path to data requested from an api\\n  // see https://jsonpath.com/\\n  string private path;\\n  // var baseApi: api base url. eg (https://chain.link/api/data/)\\n  string private baseApi;\\n\\n  // mapping s_RequestIdToUser: maps the requestId to the user making the request\\n  mapping(bytes32 => address) private s_RequestIdToUser;\\n  // mapping s_UserToVerificationStatus: stores the user's status after making a request\\n  mapping(address => string) public s_UserToVerificationStatus;\\n\\n  event StatusFufilled(bytes32 indexed requestId, string status);\\n\\n  /**\\n   * @notice Executes once when a contract is created to initialize state variables\\n   * @param _job_Id - specific job for :_operator: to run; each job is unique and returns different types of data\\n   * @param _operator - address of the specific Chainlink node that a contract makes an API call from\\n   * @param _fee - node operator price per API call / data request\\n   * @param _link_Token - LINK token address on the corresponding network\\n   */\\n  constructor(\\n    bytes32 _job_Id,\\n    address _operator,\\n    uint256 _fee,\\n    address _link_Token\\n  ) {\\n    setChainlinkToken(_link_Token);\\n    setChainlinkOracle(_operator);\\n    jobId = _job_Id;\\n    fee = _fee;\\n  }\\n\\n  /**\\n   * @notice sets the chainlink request parameters\\n   * @param _path - the path to walk when an api call is made\\n   * @param _baseApi - Set the base URL to perform the GET request on\\n   */\\n  function setQueryParams(string memory _path, string memory _baseApi)\\n    public\\n    onlyOwner\\n  {\\n    path = _path;\\n    baseApi = _baseApi;\\n  }\\n\\n  /**\\n   * @notice Create a Chainlink request to retrieve API response, and find the target (status).\\n   * @return requestId - unique request identifier\\n   */\\n  function requestHumanityStatus() public returns (bytes32 requestId) {\\n    Chainlink.Request memory req = buildChainlinkRequest(\\n      jobId,\\n      address(this),\\n      this.fulfillHumanityStatus.selector\\n    );\\n    req.add(\\\"get\\\", getEndpoint(msg.sender));\\n    req.add(\\\"path\\\", path);\\n    s_RequestIdToUser[requestId] = msg.sender;\\n    return sendOperatorRequest(req, fee);\\n  }\\n\\n  /**\\n   * Receive the response in the form of a string\\n   */\\n  function fulfillHumanityStatus(bytes32 _requestId, string memory _status)\\n    public\\n    recordChainlinkFulfillment(_requestId)\\n  {\\n    emit StatusFufilled(_requestId, _status);\\n    // sets the user verification status (approved, declined, pending ...)\\n    s_UserToVerificationStatus[s_RequestIdToUser[_requestId]] = _status;\\n  }\\n\\n  /**\\n   * get the users verification status (approved, declined, pending ...)\\n   * @param _user - the user to retrieve verification status for.\\n   */\\n  function getVerificationStatus(address _user)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return s_UserToVerificationStatus[_user];\\n  }\\n\\n  /**\\n   * @notice coverts caller address (msg.sender) to string and concatenates it with the baseApi\\n   * @param _sender - msg.sender\\n   * @return (endpoint) - the URL to which the API call is made\\n   */\\n  function getEndpoint(address _sender) internal view returns (string memory) {\\n    string memory addrToStr = Strings.toHexString(\\n      uint256(uint160(_sender)),\\n      20\\n    );\\n    return string(abi.encodePacked(baseApi, addrToStr));\\n  }\\n\\n  /**\\n   * Allow the withdrawal of Link tokens from the contract\\n   */\\n  function withdrawLink() public onlyOwner {\\n    LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n    require(\\n      link.transfer(msg.sender, link.balanceOf(address(this))),\\n      \\\"Unable to transfer\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xe146460a77fe0f25bdc7cb3de94d9144e047cfd41db64b441626ec74b10c52af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260016004553480156200001657600080fd5b5060405162002a5438038062002a5483398181016040528101906200003c9190620002ce565b6200005c620000506200009860201b60201c565b620000a060201b60201c565b6200006d816200016660201b60201c565b6200007e83620001aa60201b60201c565b83608081815250508160a081815250505050505062000340565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b6000819050919050565b6200020881620001f3565b81146200021457600080fd5b50565b6000815190506200022881620001fd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200025b826200022e565b9050919050565b6200026d816200024e565b81146200027957600080fd5b50565b6000815190506200028d8162000262565b92915050565b6000819050919050565b620002a88162000293565b8114620002b457600080fd5b50565b600081519050620002c8816200029d565b92915050565b60008060008060808587031215620002eb57620002ea620001ee565b5b6000620002fb8782880162000217565b94505060206200030e878288016200027c565b93505060406200032187828801620002b7565b925050606062000334878288016200027c565b91505092959194509250565b60805160a0516126ee620003666000396000610351015260006101a401526126ee6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a61461011e57806382a78f17146101285780638da5cb5b146101585780638dc654a214610176578063f2fde38b1461018057610093565b8063106231981461009857806336a5a404146100b65780636103681a146100d2578063708d3aa214610102575b600080fd5b6100a061019c565b6040516100ad91906115c1565b60405180910390f35b6100d060048036038101906100cb9190611736565b61037b565b005b6100ec60048036038101906100e7919061180c565b6103a7565b6040516100f991906118c1565b60405180910390f35b61011c6004803603810190610117919061190f565b610478565b005b61012661063a565b005b610142600480360381019061013d919061180c565b61064e565b60405161014f91906118c1565b60405180910390f35b6101606106ee565b60405161016d919061197a565b60405180910390f35b61017e610718565b005b61019a6004803603810190610195919061180c565b610865565b005b6000806101d17f00000000000000000000000000000000000000000000000000000000000000003063708d3aa260e01b6108e8565b90506102256040518060400160405280600381526020017f676574000000000000000000000000000000000000000000000000000000000081525061021533610919565b8361096b9092919063ffffffff16565b6102f96040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506007805461026b906119c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610297906119c4565b80156102e45780601f106102b9576101008083540402835291602001916102e4565b820191906000526020600020905b8154815290600101906020018083116102c757829003601f168201915b50505050508361096b9092919063ffffffff16565b336009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610375817f000000000000000000000000000000000000000000000000000000000000000061099e565b91505090565b6103836109d5565b81600790816103929190611bab565b5080600890816103a29190611bab565b505050565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546103f3906119c4565b80601f016020809104026020016040519081016040528092919081815260200182805461041f906119c4565b801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b50505050509050919050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190611cef565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2827f63b56ddc8e8a38cb447de2e87a230ab35aebbebb9f1badf1ca612b379949cbdb836040516105ad91906118c1565b60405180910390a281600a60006009600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816106349190611bab565b50505050565b6106426109d5565b61064c6000610a53565b565b600a602052806000526040600020600091509050805461066d906119c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610699906119c4565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b505050505081565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107206109d5565b600061072a610b19565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610782919061197a565b602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190611d3b565b6040518363ffffffff1660e01b81526004016107e0929190611d77565b6020604051808303816000875af11580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108239190611dd8565b610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990611e51565b60405180910390fd5b50565b61086d6109d5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d390611ee3565b60405180910390fd5b6108e581610a53565b50565b6108f0611521565b6108f8611521565b61090f85858584610b43909392919063ffffffff16565b9150509392505050565b6060600061093e8373ffffffffffffffffffffffffffffffffffffffff166014610bf3565b9050600881604051602001610954929190611fc2565b604051602081830303815290604052915050919050565b610982828460800151610e2f90919063ffffffff16565b610999818460800151610e2f90919063ffffffff16565b505050565b60006109cd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484610e54565b905092915050565b6109dd610f1e565b73ffffffffffffffffffffffffffffffffffffffff166109fb6106ee565b73ffffffffffffffffffffffffffffffffffffffff1614610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890612032565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b4b611521565b610b5b8560800151610100610f26565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b606060006002836002610c069190612081565b610c1091906120db565b67ffffffffffffffff811115610c2957610c2861160b565b5b6040519080825280601f01601f191660200182016040528015610c5b5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610c9357610c92612131565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610cf757610cf6612131565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610d379190612081565b610d4191906120db565b90505b6001811115610de1577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610d8357610d82612131565b5b1a60f81b828281518110610d9a57610d99612131565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610dda90612160565b9050610d44565b5060008414610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c906121d5565b60405180910390fd5b8091505092915050565b610e3c8260038351610f90565b610e4f818361111590919063ffffffff16565b505050565b6000806004549050600181610e6991906120db565b6004819055506000633c6d41b960e01b600080876000015188604001518660028b6080015160000151604051602401610ea89796959493929190612285565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610f1386838684611137565b925050509392505050565b600033905090565b610f2e61158e565b6000602083610f3d919061232a565b14610f6957602082610f4f919061232a565b6020610f5b919061235b565b82610f6691906120db565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611610fc757610fc18160058460ff16901b60ff1617846112cc90919063ffffffff16565b50611110565b60ff8167ffffffffffffffff161161101d57610ff6601860058460ff16901b17846112cc90919063ffffffff16565b506110178167ffffffffffffffff166001856112ec9092919063ffffffff16565b5061110f565b61ffff8167ffffffffffffffff16116110745761104d601960058460ff16901b17846112cc90919063ffffffff16565b5061106e8167ffffffffffffffff166002856112ec9092919063ffffffff16565b5061110e565b63ffffffff8167ffffffffffffffff16116110cd576110a6601a60058460ff16901b17846112cc90919063ffffffff16565b506110c78167ffffffffffffffff166004856112ec9092919063ffffffff16565b5061110d565b6110ea601b60058460ff16901b17846112cc90919063ffffffff16565b5061110b8167ffffffffffffffff166008856112ec9092919063ffffffff16565b505b5b5b5b505050565b61111d61158e565b61112f8384600001515184855161130e565b905092915050565b6000308460405160200161114c92919061243e565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016112429392919061246a565b6020604051808303816000875af1158015611261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112859190611dd8565b6112c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bb9061251a565b60405180910390fd5b949350505050565b6112d461158e565b6112e483846000015151846113fd565b905092915050565b6112f461158e565b611305848560000151518585611453565b90509392505050565b61131661158e565b825182111561132457600080fd5b8460200151828561133591906120db565b111561136a5761136985600261135a8860200151888761135591906120db565b6114e1565b6113649190612081565b6114fd565b5b6000808651805187602083010193508088870111156113895787860182525b60208701925050505b602084106113d057805182526020826113ab91906120db565b91506020816113ba91906120db565b90506020846113c9919061235b565b9350611392565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b61140561158e565b8360200151831061142b5761142a84600286602001516114259190612081565b6114fd565b5b83518051602085830101848153818603611446576001820183525b5050508390509392505050565b61145b61158e565b8460200151848361146c91906120db565b111561149457611493856002868561148491906120db565b61148e9190612081565b6114fd565b5b60006001836101006114a6919061266d565b6114b0919061235b565b905085518386820101858319825116178152815185880111156114d35784870182525b505085915050949350505050565b6000818311156114f3578290506114f7565b8190505b92915050565b6000826000015190506115108383610f26565b5061151b8382611115565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161158861158e565b81525090565b604051806040016040528060608152602001600081525090565b6000819050919050565b6115bb816115a8565b82525050565b60006020820190506115d660008301846115b2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611643826115fa565b810181811067ffffffffffffffff821117156116625761166161160b565b5b80604052505050565b60006116756115dc565b9050611681828261163a565b919050565b600067ffffffffffffffff8211156116a1576116a061160b565b5b6116aa826115fa565b9050602081019050919050565b82818337600083830152505050565b60006116d96116d484611686565b61166b565b9050828152602081018484840111156116f5576116f46115f5565b5b6117008482856116b7565b509392505050565b600082601f83011261171d5761171c6115f0565b5b813561172d8482602086016116c6565b91505092915050565b6000806040838503121561174d5761174c6115e6565b5b600083013567ffffffffffffffff81111561176b5761176a6115eb565b5b61177785828601611708565b925050602083013567ffffffffffffffff811115611798576117976115eb565b5b6117a485828601611708565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117d9826117ae565b9050919050565b6117e9816117ce565b81146117f457600080fd5b50565b600081359050611806816117e0565b92915050565b600060208284031215611822576118216115e6565b5b6000611830848285016117f7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611873578082015181840152602081019050611858565b83811115611882576000848401525b50505050565b600061189382611839565b61189d8185611844565b93506118ad818560208601611855565b6118b6816115fa565b840191505092915050565b600060208201905081810360008301526118db8184611888565b905092915050565b6118ec816115a8565b81146118f757600080fd5b50565b600081359050611909816118e3565b92915050565b60008060408385031215611926576119256115e6565b5b6000611934858286016118fa565b925050602083013567ffffffffffffffff811115611955576119546115eb565b5b61196185828601611708565b9150509250929050565b611974816117ce565b82525050565b600060208201905061198f600083018461196b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119dc57607f821691505b6020821081036119ef576119ee611995565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611a1a565b611a618683611a1a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000611aa8611aa3611a9e84611a79565b611a83565b611a79565b9050919050565b6000819050919050565b611ac283611a8d565b611ad6611ace82611aaf565b848454611a27565b825550505050565b600090565b611aeb611ade565b611af6818484611ab9565b505050565b5b81811015611b1a57611b0f600082611ae3565b600181019050611afc565b5050565b601f821115611b5f57611b30816119f5565b611b3984611a0a565b81016020851015611b48578190505b611b5c611b5485611a0a565b830182611afb565b50505b505050565b600082821c905092915050565b6000611b8260001984600802611b64565b1980831691505092915050565b6000611b9b8383611b71565b9150826002028217905092915050565b611bb482611839565b67ffffffffffffffff811115611bcd57611bcc61160b565b5b611bd782546119c4565b611be2828285611b1e565b600060209050601f831160018114611c155760008415611c03578287015190505b611c0d8582611b8f565b865550611c75565b601f198416611c23866119f5565b60005b82811015611c4b57848901518255600182019150602085019450602081019050611c26565b86831015611c685784890151611c64601f891682611b71565b8355505b6001600288020188555050505b505050505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000611cd9602883611844565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b611d1881611a79565b8114611d2357600080fd5b50565b600081519050611d3581611d0f565b92915050565b600060208284031215611d5157611d506115e6565b5b6000611d5f84828501611d26565b91505092915050565b611d7181611a79565b82525050565b6000604082019050611d8c600083018561196b565b611d996020830184611d68565b9392505050565b60008115159050919050565b611db581611da0565b8114611dc057600080fd5b50565b600081519050611dd281611dac565b92915050565b600060208284031215611dee57611ded6115e6565b5b6000611dfc84828501611dc3565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000611e3b601283611844565b9150611e4682611e05565b602082019050919050565b60006020820190508181036000830152611e6a81611e2e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ecd602683611844565b9150611ed882611e71565b604082019050919050565b60006020820190508181036000830152611efc81611ec0565b9050919050565b600081905092915050565b60008154611f1b816119c4565b611f258186611f03565b94506001821660008114611f405760018114611f5557611f88565b60ff1983168652811515820286019350611f88565b611f5e856119f5565b60005b83811015611f8057815481890152600182019150602081019050611f61565b838801955050505b50505092915050565b6000611f9c82611839565b611fa68185611f03565b9350611fb6818560208601611855565b80840191505092915050565b6000611fce8285611f0e565b9150611fda8284611f91565b91508190509392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061201c602083611844565b915061202782611fe6565b602082019050919050565b6000602082019050818103600083015261204b8161200f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061208c82611a79565b915061209783611a79565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120d0576120cf612052565b5b828202905092915050565b60006120e682611a79565b91506120f183611a79565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561212657612125612052565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061216b82611a79565b91506000820361217e5761217d612052565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006121bf602083611844565b91506121ca82612189565b602082019050919050565b600060208201905081810360008301526121ee816121b2565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61222a816121f5565b82525050565b600081519050919050565b600082825260208201905092915050565b600061225782612230565b612261818561223b565b9350612271818560208601611855565b61227a816115fa565b840191505092915050565b600060e08201905061229a600083018a61196b565b6122a76020830189611d68565b6122b460408301886115b2565b6122c16060830187612221565b6122ce6080830186611d68565b6122db60a0830185611d68565b81810360c08301526122ed818461224c565b905098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061233582611a79565b915061234083611a79565b9250826123505761234f6122fb565b5b828206905092915050565b600061236682611a79565b915061237183611a79565b92508282101561238457612383612052565b5b828203905092915050565b60006123aa6123a56123a0846117ae565b611a83565b6117ae565b9050919050565b60006123bc8261238f565b9050919050565b60006123ce826123b1565b9050919050565b60008160601b9050919050565b60006123ed826123d5565b9050919050565b60006123ff826123e2565b9050919050565b612417612412826123c3565b6123f4565b82525050565b6000819050919050565b61243861243382611a79565b61241d565b82525050565b600061244a8285612406565b60148201915061245a8284612427565b6020820191508190509392505050565b600060608201905061247f600083018661196b565b61248c6020830185611d68565b818103604083015261249e818461224c565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000612504602383611844565b915061250f826124a8565b604082019050919050565b60006020820190508181036000830152612533816124f7565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156125915780860481111561256d5761256c612052565b5b600185161561257c5780820291505b808102905061258a8561253a565b9450612551565b94509492505050565b6000826125aa5760019050612666565b816125b85760009050612666565b81600181146125ce57600281146125d857612607565b6001915050612666565b60ff8411156125ea576125e9612052565b5b8360020a91508482111561260157612600612052565b5b50612666565b5060208310610133831016604e8410600b841016171561263c5782820a90508381111561263757612636612052565b5b612666565b6126498484846001612547565b925090508184048111156126605761265f612052565b5b81810290505b9392505050565b600061267882611a79565b915061268383611a79565b92506126b07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461259a565b90509291505056fea264697066735822122034749504b0b832b113ce2f1cb9a4b41712bde66adadfd35db06c91b908aca81864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a61461011e57806382a78f17146101285780638da5cb5b146101585780638dc654a214610176578063f2fde38b1461018057610093565b8063106231981461009857806336a5a404146100b65780636103681a146100d2578063708d3aa214610102575b600080fd5b6100a061019c565b6040516100ad91906115c1565b60405180910390f35b6100d060048036038101906100cb9190611736565b61037b565b005b6100ec60048036038101906100e7919061180c565b6103a7565b6040516100f991906118c1565b60405180910390f35b61011c6004803603810190610117919061190f565b610478565b005b61012661063a565b005b610142600480360381019061013d919061180c565b61064e565b60405161014f91906118c1565b60405180910390f35b6101606106ee565b60405161016d919061197a565b60405180910390f35b61017e610718565b005b61019a6004803603810190610195919061180c565b610865565b005b6000806101d17f00000000000000000000000000000000000000000000000000000000000000003063708d3aa260e01b6108e8565b90506102256040518060400160405280600381526020017f676574000000000000000000000000000000000000000000000000000000000081525061021533610919565b8361096b9092919063ffffffff16565b6102f96040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506007805461026b906119c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610297906119c4565b80156102e45780601f106102b9576101008083540402835291602001916102e4565b820191906000526020600020905b8154815290600101906020018083116102c757829003601f168201915b50505050508361096b9092919063ffffffff16565b336009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610375817f000000000000000000000000000000000000000000000000000000000000000061099e565b91505090565b6103836109d5565b81600790816103929190611bab565b5080600890816103a29190611bab565b505050565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546103f3906119c4565b80601f016020809104026020016040519081016040528092919081815260200182805461041f906119c4565b801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b50505050509050919050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190611cef565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2827f63b56ddc8e8a38cb447de2e87a230ab35aebbebb9f1badf1ca612b379949cbdb836040516105ad91906118c1565b60405180910390a281600a60006009600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816106349190611bab565b50505050565b6106426109d5565b61064c6000610a53565b565b600a602052806000526040600020600091509050805461066d906119c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610699906119c4565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b505050505081565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107206109d5565b600061072a610b19565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610782919061197a565b602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190611d3b565b6040518363ffffffff1660e01b81526004016107e0929190611d77565b6020604051808303816000875af11580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108239190611dd8565b610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990611e51565b60405180910390fd5b50565b61086d6109d5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d390611ee3565b60405180910390fd5b6108e581610a53565b50565b6108f0611521565b6108f8611521565b61090f85858584610b43909392919063ffffffff16565b9150509392505050565b6060600061093e8373ffffffffffffffffffffffffffffffffffffffff166014610bf3565b9050600881604051602001610954929190611fc2565b604051602081830303815290604052915050919050565b610982828460800151610e2f90919063ffffffff16565b610999818460800151610e2f90919063ffffffff16565b505050565b60006109cd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484610e54565b905092915050565b6109dd610f1e565b73ffffffffffffffffffffffffffffffffffffffff166109fb6106ee565b73ffffffffffffffffffffffffffffffffffffffff1614610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890612032565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b4b611521565b610b5b8560800151610100610f26565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b606060006002836002610c069190612081565b610c1091906120db565b67ffffffffffffffff811115610c2957610c2861160b565b5b6040519080825280601f01601f191660200182016040528015610c5b5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610c9357610c92612131565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610cf757610cf6612131565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610d379190612081565b610d4191906120db565b90505b6001811115610de1577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610d8357610d82612131565b5b1a60f81b828281518110610d9a57610d99612131565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610dda90612160565b9050610d44565b5060008414610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c906121d5565b60405180910390fd5b8091505092915050565b610e3c8260038351610f90565b610e4f818361111590919063ffffffff16565b505050565b6000806004549050600181610e6991906120db565b6004819055506000633c6d41b960e01b600080876000015188604001518660028b6080015160000151604051602401610ea89796959493929190612285565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610f1386838684611137565b925050509392505050565b600033905090565b610f2e61158e565b6000602083610f3d919061232a565b14610f6957602082610f4f919061232a565b6020610f5b919061235b565b82610f6691906120db565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611610fc757610fc18160058460ff16901b60ff1617846112cc90919063ffffffff16565b50611110565b60ff8167ffffffffffffffff161161101d57610ff6601860058460ff16901b17846112cc90919063ffffffff16565b506110178167ffffffffffffffff166001856112ec9092919063ffffffff16565b5061110f565b61ffff8167ffffffffffffffff16116110745761104d601960058460ff16901b17846112cc90919063ffffffff16565b5061106e8167ffffffffffffffff166002856112ec9092919063ffffffff16565b5061110e565b63ffffffff8167ffffffffffffffff16116110cd576110a6601a60058460ff16901b17846112cc90919063ffffffff16565b506110c78167ffffffffffffffff166004856112ec9092919063ffffffff16565b5061110d565b6110ea601b60058460ff16901b17846112cc90919063ffffffff16565b5061110b8167ffffffffffffffff166008856112ec9092919063ffffffff16565b505b5b5b5b505050565b61111d61158e565b61112f8384600001515184855161130e565b905092915050565b6000308460405160200161114c92919061243e565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016112429392919061246a565b6020604051808303816000875af1158015611261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112859190611dd8565b6112c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bb9061251a565b60405180910390fd5b949350505050565b6112d461158e565b6112e483846000015151846113fd565b905092915050565b6112f461158e565b611305848560000151518585611453565b90509392505050565b61131661158e565b825182111561132457600080fd5b8460200151828561133591906120db565b111561136a5761136985600261135a8860200151888761135591906120db565b6114e1565b6113649190612081565b6114fd565b5b6000808651805187602083010193508088870111156113895787860182525b60208701925050505b602084106113d057805182526020826113ab91906120db565b91506020816113ba91906120db565b90506020846113c9919061235b565b9350611392565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b61140561158e565b8360200151831061142b5761142a84600286602001516114259190612081565b6114fd565b5b83518051602085830101848153818603611446576001820183525b5050508390509392505050565b61145b61158e565b8460200151848361146c91906120db565b111561149457611493856002868561148491906120db565b61148e9190612081565b6114fd565b5b60006001836101006114a6919061266d565b6114b0919061235b565b905085518386820101858319825116178152815185880111156114d35784870182525b505085915050949350505050565b6000818311156114f3578290506114f7565b8190505b92915050565b6000826000015190506115108383610f26565b5061151b8382611115565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161158861158e565b81525090565b604051806040016040528060608152602001600081525090565b6000819050919050565b6115bb816115a8565b82525050565b60006020820190506115d660008301846115b2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611643826115fa565b810181811067ffffffffffffffff821117156116625761166161160b565b5b80604052505050565b60006116756115dc565b9050611681828261163a565b919050565b600067ffffffffffffffff8211156116a1576116a061160b565b5b6116aa826115fa565b9050602081019050919050565b82818337600083830152505050565b60006116d96116d484611686565b61166b565b9050828152602081018484840111156116f5576116f46115f5565b5b6117008482856116b7565b509392505050565b600082601f83011261171d5761171c6115f0565b5b813561172d8482602086016116c6565b91505092915050565b6000806040838503121561174d5761174c6115e6565b5b600083013567ffffffffffffffff81111561176b5761176a6115eb565b5b61177785828601611708565b925050602083013567ffffffffffffffff811115611798576117976115eb565b5b6117a485828601611708565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117d9826117ae565b9050919050565b6117e9816117ce565b81146117f457600080fd5b50565b600081359050611806816117e0565b92915050565b600060208284031215611822576118216115e6565b5b6000611830848285016117f7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611873578082015181840152602081019050611858565b83811115611882576000848401525b50505050565b600061189382611839565b61189d8185611844565b93506118ad818560208601611855565b6118b6816115fa565b840191505092915050565b600060208201905081810360008301526118db8184611888565b905092915050565b6118ec816115a8565b81146118f757600080fd5b50565b600081359050611909816118e3565b92915050565b60008060408385031215611926576119256115e6565b5b6000611934858286016118fa565b925050602083013567ffffffffffffffff811115611955576119546115eb565b5b61196185828601611708565b9150509250929050565b611974816117ce565b82525050565b600060208201905061198f600083018461196b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119dc57607f821691505b6020821081036119ef576119ee611995565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611a1a565b611a618683611a1a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000611aa8611aa3611a9e84611a79565b611a83565b611a79565b9050919050565b6000819050919050565b611ac283611a8d565b611ad6611ace82611aaf565b848454611a27565b825550505050565b600090565b611aeb611ade565b611af6818484611ab9565b505050565b5b81811015611b1a57611b0f600082611ae3565b600181019050611afc565b5050565b601f821115611b5f57611b30816119f5565b611b3984611a0a565b81016020851015611b48578190505b611b5c611b5485611a0a565b830182611afb565b50505b505050565b600082821c905092915050565b6000611b8260001984600802611b64565b1980831691505092915050565b6000611b9b8383611b71565b9150826002028217905092915050565b611bb482611839565b67ffffffffffffffff811115611bcd57611bcc61160b565b5b611bd782546119c4565b611be2828285611b1e565b600060209050601f831160018114611c155760008415611c03578287015190505b611c0d8582611b8f565b865550611c75565b601f198416611c23866119f5565b60005b82811015611c4b57848901518255600182019150602085019450602081019050611c26565b86831015611c685784890151611c64601f891682611b71565b8355505b6001600288020188555050505b505050505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000611cd9602883611844565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b611d1881611a79565b8114611d2357600080fd5b50565b600081519050611d3581611d0f565b92915050565b600060208284031215611d5157611d506115e6565b5b6000611d5f84828501611d26565b91505092915050565b611d7181611a79565b82525050565b6000604082019050611d8c600083018561196b565b611d996020830184611d68565b9392505050565b60008115159050919050565b611db581611da0565b8114611dc057600080fd5b50565b600081519050611dd281611dac565b92915050565b600060208284031215611dee57611ded6115e6565b5b6000611dfc84828501611dc3565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000611e3b601283611844565b9150611e4682611e05565b602082019050919050565b60006020820190508181036000830152611e6a81611e2e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ecd602683611844565b9150611ed882611e71565b604082019050919050565b60006020820190508181036000830152611efc81611ec0565b9050919050565b600081905092915050565b60008154611f1b816119c4565b611f258186611f03565b94506001821660008114611f405760018114611f5557611f88565b60ff1983168652811515820286019350611f88565b611f5e856119f5565b60005b83811015611f8057815481890152600182019150602081019050611f61565b838801955050505b50505092915050565b6000611f9c82611839565b611fa68185611f03565b9350611fb6818560208601611855565b80840191505092915050565b6000611fce8285611f0e565b9150611fda8284611f91565b91508190509392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061201c602083611844565b915061202782611fe6565b602082019050919050565b6000602082019050818103600083015261204b8161200f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061208c82611a79565b915061209783611a79565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120d0576120cf612052565b5b828202905092915050565b60006120e682611a79565b91506120f183611a79565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561212657612125612052565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061216b82611a79565b91506000820361217e5761217d612052565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006121bf602083611844565b91506121ca82612189565b602082019050919050565b600060208201905081810360008301526121ee816121b2565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61222a816121f5565b82525050565b600081519050919050565b600082825260208201905092915050565b600061225782612230565b612261818561223b565b9350612271818560208601611855565b61227a816115fa565b840191505092915050565b600060e08201905061229a600083018a61196b565b6122a76020830189611d68565b6122b460408301886115b2565b6122c16060830187612221565b6122ce6080830186611d68565b6122db60a0830185611d68565b81810360c08301526122ed818461224c565b905098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061233582611a79565b915061234083611a79565b9250826123505761234f6122fb565b5b828206905092915050565b600061236682611a79565b915061237183611a79565b92508282101561238457612383612052565b5b828203905092915050565b60006123aa6123a56123a0846117ae565b611a83565b6117ae565b9050919050565b60006123bc8261238f565b9050919050565b60006123ce826123b1565b9050919050565b60008160601b9050919050565b60006123ed826123d5565b9050919050565b60006123ff826123e2565b9050919050565b612417612412826123c3565b6123f4565b82525050565b6000819050919050565b61243861243382611a79565b61241d565b82525050565b600061244a8285612406565b60148201915061245a8284612427565b6020820191508190509392505050565b600060608201905061247f600083018661196b565b61248c6020830185611d68565b818103604083015261249e818461224c565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000612504602383611844565b915061250f826124a8565b604082019050919050565b60006020820190508181036000830152612533816124f7565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156125915780860481111561256d5761256c612052565b5b600185161561257c5780820291505b808102905061258a8561253a565b9450612551565b94509492505050565b6000826125aa5760019050612666565b816125b85760009050612666565b81600181146125ce57600281146125d857612607565b6001915050612666565b60ff8411156125ea576125e9612052565b5b8360020a91508482111561260157612600612052565b5b50612666565b5060208310610133831016604e8410600b841016171561263c5782820a90508381111561263757612636612052565b5b612666565b6126498484846001612547565b925090508184048111156126605761265f612052565b5b81810290505b9392505050565b600061267882611a79565b915061268383611a79565b92506126b07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461259a565b90509291505056fea264697066735822122034749504b0b832b113ce2f1cb9a4b41712bde66adadfd35db06c91b908aca81864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_fee": "- node operator price per API call / data request",
          "_job_Id": "- specific job for :_operator: to run; each job is unique and returns different types of data",
          "_link_Token": "- LINK token address on the corresponding network",
          "_operator": "- address of the specific Chainlink node that a contract makes an API call from"
        }
      },
      "getVerificationStatus(address)": {
        "params": {
          "_user": "- the user to retrieve verification status for."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestHumanityStatus()": {
        "returns": {
          "requestId": "- unique request identifier"
        }
      },
      "setQueryParams(string,string)": {
        "params": {
          "_baseApi": "- Set the base URL to perform the GET request on",
          "_path": "- the path to walk when an api call is made"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Executes once when a contract is created to initialize state variables"
      },
      "fulfillHumanityStatus(bytes32,string)": {
        "notice": "Receive the response in the form of a string"
      },
      "getVerificationStatus(address)": {
        "notice": "get the users verification status (approved, declined, pending ...)"
      },
      "requestHumanityStatus()": {
        "notice": "Create a Chainlink request to retrieve API response, and find the target (status)."
      },
      "setQueryParams(string,string)": {
        "notice": "sets the chainlink request parameters"
      },
      "withdrawLink()": {
        "notice": "Allow the withdrawal of Link tokens from the contract"
      }
    },
    "notice": "Request testnet LINK and ETH here: https://faucets.chain.link/ Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/ Run your own chainlink Node and deploy an operator contract: https://docs.chain.link/docs/running-a-chainlink-node/",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2183,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2556,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "path",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2558,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "baseApi",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2562,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_RequestIdToUser",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2566,
        "contract": "contracts/AreYouHuman.sol:AreYouHuman",
        "label": "s_UserToVerificationStatus",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}